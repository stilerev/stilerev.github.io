import * as a1lib from "alt1/base";
import { ImgRef } from "alt1/base";
export type LifeState = {
    hp: number;
    dren: number;
    pray: number;
    sum: number;
    exacthp: {
        cur: number;
        max: number;
    } | null;
    exactpray: {
        cur: number;
        max: number;
    } | null;
    exactsum: {
        cur: number;
        max: number;
    } | null;
    exactdren: {
        cur: number;
        max: number;
    } | null;
};
type Layout = {
    hp: a1lib.PointLike;
    dren: a1lib.PointLike;
    pray: a1lib.PointLike;
    sum: a1lib.PointLike;
    width: number;
    height: number;
    hor: boolean;
    barlength: number;
    type: MainBarType;
};
type MainBarType = "mainflat" | "mainhor" | "mainver" | "maintower";
export default class ActionbarReader {
    pos: {
        x: number;
        y: number;
        layout: Layout;
    } | null;
    static layouts: {
        [name: string]: Layout;
    };
    find(img?: ImgRef): boolean;
    read(): LifeState;
    read(buffer: ImageData, bufx: number, bufy: number): LifeState;
    readBarNumber(buffer: ImageData, x: number, y: number, hor: boolean): {
        cur: number;
        max: number;
    } | null;
    readBar(buffer: ImageData, x: number, y: number, hor: boolean): number;
    static getCurrentLayoutData(img: ImgRef): string;
}
export {};
//# sourceMappingURL=actionbar.d.ts.map