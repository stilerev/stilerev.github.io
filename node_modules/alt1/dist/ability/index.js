(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("alt1/base"), require("alt1/ocr"));
	else if(typeof define === 'function' && define.amd)
		define(["alt1/base", "alt1/ocr"], factory);
	else if(typeof exports === 'object')
		exports["ability"] = factory(require("alt1/base"), require("alt1/ocr"));
	else
		root["Ability"] = factory(root["A1lib"], root["OCR"]);
})(globalThis, (__WEBPACK_EXTERNAL_MODULE_alt1_base__, __WEBPACK_EXTERNAL_MODULE_alt1_ocr__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ability/actionbarimgs/dren.data.png":
/*!*************************************************!*\
  !*** ./src/ability/actionbarimgs/dren.data.png ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAJJSURBVChTJZDfS1NRAMfPuefe3bO2ufmL6dzMpKY0nducMEYSVCZTCyKmSSyIIvojeuglEqlQevGhRyN68FHoFw3BJc3KrYlam6t0tB/ldre29st7bucSfDmch+/5fL/fA0OhsKmra/HJvCk/Z7cpGQag/0KAQTyE4MWauLBUKZRE5J32Rb9+uXBpMhjDws6q0cgyEDIMlE9E76D3KLKZUeAzQKmf+2dGPNQ9dvFyLK+LrLypQvxbgBqVhHkWyW+Avplp0THo3lRhcXnH7R6Oxr7Zzk6Hk7rHC/7ILn75niUStByTm9AaZhOD7lzTsDi9tLzbb3Nl9mL206NYrfsQ8Ct5bvs7AABajwM6QN5wa0Jj0gIgJJ++3uuzWA72492nzikR3gi+Uym5WAJ43ADzMhjdHFfToDLh3q5lgltx19BQOZU42TfA8qrwp3XKphMdPYA2Rjc8akkCB3+YeOpIKZsOhjZdLjchpMdizRM+tvnxR5J79gpSoeueBkrlFXA9qsI8Lgq5YCjidAxSt33AJhSymURCoeDKNYk5FOEhgSwCzhNVuqK1US3mU3Pzj9KlGqgXR8enCpXi30ppcHgM+c43SASI1bqhsUbxaYFVYr4oZAOra01tpm6TXtPW63A4LHYXfHC709pZIRIQCaQqVphkjqVRv3KSf6vc3OmcnZmhaVeu+pDEGjqaRDWm3QAhkH6KChOek5Q8JITTtvfrDcbnKxu5fBZ1tGrjaZWCAy0aUWZL1CHjMwVYb5+Y9Hrv3p/FiDwcMf8DoSn35z60AhIAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/ability/actionbarimgs/drenretal.data.png":
/*!******************************************************!*\
  !*** ./src/ability/actionbarimgs/drenretal.data.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAJlSURBVChTAVoCpf0B0NDRHSAgrKGRI/WQNDIKAQEAAgIAAQEAAQEAAQIHyMz32wdpVF5u4+DgAu3x9MPCw1Rfb90Od8jH+gEBAAD/AAEAAAEAAMnK7tsKcVRebsPCw+3x9APv6+M/Q0nb2tlJTVPX7hDbxLwQEAb29gG+2Pn2HYFMU2LDwsMNDxGek30Dk1/xn7LYODk929zfMENZz+cQvbK9y9X9BCqBP1BnzMO+DQoFm5WGYk3QA4llDgcJ6Kez3SwvOOri3C49R+D5EuP2D1djb9vLwAAAAKGcj2g51T4uDQNxUwwgEAEG9OeiueIpKSvt494mO0T77u7Cwb8ZExChnphWPM9JOgwBAQAC/f0A/P0AJiAGHPzSlZqYAAAA7dDHNzU1FAkEh4eFHPzSHgcOAQEAAQEAA2tODP7+APP1AtHdAvkGGs7Q0jEwMP7+/iUoK/799fbl1fr3BcnNAMbK/wNSPQwMCAHn6QDkCkIoMj/p6uq6wcM1Ly3+/v4sLjTi6+75690KBgLw9vwDLjpS693awdsDQlV6DAgG9/j02NPT0dHMJDE5EggAGR4qtrWsAf79DCpTA2pyhvIGJgQbPyIdF9Tb4LewqzMU8Q//77i+yQ4WHiIdFwMTKh8pNSQtOgEvNjihmpkAAAB2eHgN8cVNNAwNCf79/gDm7QGx0PkFFzeKiIgAAABcXVwDIi0w5fYDFAkD6OXjMxbhKx77BwX/BAMACggAAP4FBhQvFhocqcHP8PHtA7h2WbvV3cW+umdnZubv9AHv4gkH/v3+AefvAuoSUFJUVYSIiQgD/YtFJyQrDVak1lyKAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/ability/actionbarimgs/lifepoints.data.png":
/*!*******************************************************!*\
  !*** ./src/ability/actionbarimgs/lifepoints.data.png ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAFKSURBVChThZE9T8NADIZtX9I2AdokVEwIWoJYEEKMjCAx8A/4BaysLAjEwN9hQYhPMbMyI5aqHRCpQiu1iXq9w+mVqHyJV5Fj+318d8mhPNggBKPHSJ89tV+7xPncjDpcCzarY09pQLW/Cp2BqaFspwq2HyIf8HwrsHlkwkK1t8KJfh9gxTbNl1bSXQrWk54p2eLILg5367E0TfCsLJoZQ0xaGO3UOeul0i2OwB/KrREaJz3nd87I7UvwSmQ2/VfZAbKzviVcdKQ23W8qW+jjUM9OZb/Qq5ZM9y8xx5Eu2im/eI6nR/0vMktywph4pul5Wy4HrtNPNRFfQa5868t2ctoCUat4dx21wDRoB3VO5+tdJcPjJhTREou+R4A3saxXKPykizTmrpFOGrpANhGJMPD5ywXSfSxrHoU6o/lh7hbpqKEsURBEqOEDcNuAKOescgUAAAAASUVORK5CYII=")

/***/ }),

/***/ "./src/ability/actionbarimgs/lifepointspoison.data.png":
/*!*************************************************************!*\
  !*** ./src/ability/actionbarimgs/lifepointspoison.data.png ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAEzSURBVChTjZI9SwNBEIbfyXnnXZJLIggKRjCFCHb5Hf4IO/+FINjbWmlhZWdhJVyhNtYiRKOIqMUhOcyHkPu+cZc9ziSF5GGK+Xhnd4ZdugsMIii87sLZsW+ZHKVIY9rZ1bbaJVViBl25hgoUaYKTgzjLsHeol7Q8qSDnpeKNIxUsl2Xb22csrtlY14U/WaLze308kBOUG6yyMxRVOr2ZGuAf6OhyXmm+4DzQ/sXfnsaPXGWSyI5zrzhViEYDeGk8YyJZ9Jc6T3JxkVWxwB9JK1AlIdOWDAQVNJsUBlKRhEogHWH6ImoNPHbZvWVts43+MwIbtSr1fA4Yk2ab9PrO7jWbNmutbdna6zCtEk2/pGA4xIeTVeriE0Bba4EJhoGvB8YKWVYuEnz34TpZtY6MkYT4BQQSkh1bM5DyAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/ability/actionbarimgs/prayer.data.png":
/*!***************************************************!*\
  !*** ./src/ability/actionbarimgs/prayer.data.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAHxSURBVChTXZFLaxNhFIa/28x8mYmxjc2NtM1giNhEam2zEnXhykjBjSCCuy78Af4Df4F0VbeCgiu1duFCFNRQFDeWoITaJG3SlF4cp2YymczV06YE8SwOh/d9OO93+PD8vYXd77sKG+NiWKDcdnvTNy4Xb81/fbWy9mZVZNzxLMs2uu4BPc3SwMl8NCRFEMJyIjxbup6IjGJFaq3XAgtLoowxxT4hA46LCqMiol72UkFNq8IpN5PO5OYugEIJAxcYIrIQTCjApnU4NpW4VirFotIIU+JRDjMovX4HXGDoOfUKQoHjm8np9O2F+/EzHCE0EiaWHSgyU6dmttpVfWc/CBAdT+ZDsXD+6tzNO3eHHHQu4iM6xDLnL5qeqWl7+MHDJ9nZGXVchcQhNyzd8KHvaVaj1cDP1w4jAYE74H3/cYMCWne7TofRTCqPFR6RopAFiZB7ghzXYGtH9+utBsW/hc1q1TCN+ERWkYV/6ZP0X713K8ufXr6mZyeKTtdqr29sbf/MForD3QNuX7OePV788eGLY/TpZKpACCOIHmy2mjsbR/Tx7sG+p0uP6p8r8OEIfiwVyxGMMaGYEG27bWMvOZlzhP4f3X+7/KLyvswYB9/zbOJSw3YsmALfCzxUWS3XmjW4t96sfSt/BAV0cG3H+gvHq+CsjxcGZQAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/ability/actionbarimgs/prayeron.data.png":
/*!*****************************************************!*\
  !*** ./src/ability/actionbarimgs/prayeron.data.png ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAHYSURBVChTXc9NaxNBGAfwnZnNzuxmd5OUbJNN0uiKCrah2EtVPLTQi+DNozc/ime/hHjTgwcPRQrtxR5EUVAEEdTQhrhtYvc1a/ctOz6aUkKfw7D8/z/mmUWPtnYy/tEyr9bKusQqYeSjHrK21vu778SviDEtjX03Cvr2d9KzVsBV1K6uGQTJkRIs3uoaqj5l2B14FdSkTBcEWaYENxrL4FSlSdDCJD0Vl2jbbJW0vN1sSZdk9zSGHFowWJcWETUEQXEmnlc/Wt1YM2q0KpaNBbq6cTNq2JBDCwYjXC0yNAp/uUb/zoO7IARBqKoYTviGBHJowZC16w8jeqLcSG/fX593TEJxysuyWLdaR5MD9yREj5/smb3OkmnOu/PxJgWcYycZ2DZ6/tnXOYb/gPddcLMB7eVRFopk+fIml4lGq7ALNsLeM/J/ZreGPj8cDskV6Z79w/bDca3VvqBnbuQkb3f2v+3+xIyqxFcO3xxvP3s5dpNzcfZKN4EcWjA4yQOOU0o090v86umLkRPP3fcvgRxaMORaZxNjxIVpqcSCYyfMvHqnm5WSwCv2t/fsDyNJVKDNpwnpNFYQwpgQgRdFwX3/t24ZOqsdDAefXr/HCRWxmBfpn9j9C/Fr4hM9D4PKAAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/ability/actionbarimgs/sumpoints.data.png":
/*!******************************************************!*\
  !*** ./src/ability/actionbarimgs/sumpoints.data.png ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAAJfSURBVChTDZHda9NgFMaTN23TdUm7ds3SpG36tdaum7IxmQNl4gc4v7Z5OdCJt4J388YL8U/YbkQQREGGV0OFgUNwDJUJbk7xe3UptaySreva9CtN3uT1vTs85/dwznMOmTl+2mg1zkxOf1pb4YToifFx1QQeN+OnbY/uzxt624mshq5rmkYJsV4LGgflPaeLAQDZnEwx+7NUVhmpd3R4bH31lWZCRJA2QFLdQsjt8zf2d8OJjBRPRo4MLs3fW11cqO0Wfan00LlJPhQ121qzWiZHxicxd3X2Lp7bKCn7B6qUTMoba3wk3unnCYJo1dUOxp1OpyhRDE7N3I73Sh/evFZyslYpO2m7QTlbWttB2+0OujsUpTtZjhVs2Kfs5ZbuzDVbrWCqP31sTIwnsFhV6zhcTBrAdVC0B4CDCkZiRfk36WKbpd3RqemJS5eR3c6ybCiQ9Hp6MFSrWW6WqiMTYMgbjmNrlxQTeC4nKxvv3iYkvpuxNFjW1HZV2Vl8sTx7/Ro1MXOzXms065WglBwYGvzy+ePeTmE7K2dl2c8EvF7m5bPHywsPTYSokfNXPCz7r5Dri4Y2N78qBdnUTdOCv9bfP38yR9Adq0uLDpcLAECdvXGrh/PtK6VKo21alofjXXzY2+UpFQvqQXX7x3eCJJGFTAhBxMcghBJDw3hdKRYXDvVzAh+OSIdPXUCWRdlsJAC4ZUId5L5trjx9kEklIn0ZnosFRBEfnOx0D/YdpSkAdfxX3dI1aJhUuVrLbm2dvDghCIIBoN8tFpUCw7JdPd5K/k8+/5cgSAgNCxr/AZQMC0FN97E9AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/ability/imgs/actionbarnumbers.data.png":
/*!****************************************************!*\
  !*** ./src/ability/imgs/actionbarnumbers.data.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAIIAAAAICAMAAAAC9tdxAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAMUExURQAAAA8UFrN6LwAAAMHCSL8AAAAEdFJOU////wBAKqn0AAAACW5vUEUAAAAAAAAAAAChinLVAAAA90lEQVQ4T4WS2xLDIBBCXf3/fy4se9POtD7EExSCSdY5x2ybGeDY3sCHMISQIErL1aERbsKV5p1kRa3tzQpwrAi0tRTYpG2euDhc47JWoXjIt1ex3Jrk49Gw12N4R7NhVuAgbMM6yD35kCCluFaOIMXSG4SpqDV3axvNkCIQkCQfiGeICkV0xPugdlXw2HHBVISR2lsBKRndr5Xr1PjSpRW1A3NqbPinwijzVGBeRFMlMQ/nuzXsErV3aijzuwIgtaeCNwiiSvKz+z/TGvfHapUeGgDBvHVHXijHLU1BXqGOOai/rFv1IVobxKBX4yMiDGaNgots7w/2HAa69Wye5gAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/ability/imgs/settingscog.data.png":
/*!***********************************************!*\
  !*** ./src/ability/imgs/settingscog.data.png ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAcAAAAKCAYAAAB4zEQNAAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAAJbm9QRQAAAAAAAAAAAKGKctUAAADHSURBVChTY7y2O+y/NAcjw7ajbxgMNYUZpIQZGUDgyct3DIxPNzj/Z+JhBQuAwJev/8A0DzcTA9OhCx8Z/n/9zfD+3WeGs1feMaj47WQE4XNANuPJ+Y7/JQW+M1x68I/Bu+AkxEwoYAJJ/PnCgCEBAkzf3nyCMjEB041nDAy/fnxiOD3D7D9UDA6YXr58DmbwsXxFUXBmpvl/xkuTlP9DLPsGxFxgFgywnL/7joGV5T/DjUcMDKoy3xnE+FkZBHkZGG4++c0AAHRPSyvaocp9AAAAAElFTkSuQmCC")

/***/ }),

/***/ "./src/ability/imgs/smallbarnumber.data.png":
/*!**************************************************!*\
  !*** ./src/ability/imgs/smallbarnumber.data.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports=(__webpack_require__(/*! alt1/base */ "alt1/base").ImageDetect.imageDataFromBase64)("iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAMAAAAVv241AAAAAW5vUEUAYtdMlAAAAARub1BFAAAAAEEgjiIAAAASUExURQ8UFqBnC8qCDkc1FAAAAAAAAGC4B/sAAAAGdFJOU///////ALO/pL8AAAAJbm9QRQAAAAAAAAAAAKGKctUAAAA+SURBVBhXlY4xEgAgCMNoOf7/ZalwiqNZSBmgJsANyl3DeT1TeRTTw+htifHsP8I8ALYletqq8NR5iyoJYgHlIAI/8NoYcAAAAABJRU5ErkJggg==")

/***/ }),

/***/ "./src/ability/actionbar.ts":
/*!**********************************!*\
  !*** ./src/ability/actionbar.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const a1lib = __importStar(__webpack_require__(/*! alt1/base */ "alt1/base"));
const base_1 = __webpack_require__(/*! alt1/base */ "alt1/base");
const OCR = __importStar(__webpack_require__(/*! alt1/ocr */ "alt1/ocr"));
var chatfont = __webpack_require__(/*! ../fonts/aa_8px.fontmeta.json */ "./src/fonts/aa_8px.fontmeta.json");
var imgs = (0, base_1.webpackImages)({
    dren: __webpack_require__(/*! ./actionbarimgs/dren.data.png */ "./src/ability/actionbarimgs/dren.data.png"),
    drenretal: __webpack_require__(/*! ./actionbarimgs/drenretal.data.png */ "./src/ability/actionbarimgs/drenretal.data.png"),
    lifepoints: __webpack_require__(/*! ./actionbarimgs/lifepoints.data.png */ "./src/ability/actionbarimgs/lifepoints.data.png"),
    lifepointspoison: __webpack_require__(/*! ./actionbarimgs/lifepointspoison.data.png */ "./src/ability/actionbarimgs/lifepointspoison.data.png"),
    prayer: __webpack_require__(/*! ./actionbarimgs/prayer.data.png */ "./src/ability/actionbarimgs/prayer.data.png"),
    prayeron: __webpack_require__(/*! ./actionbarimgs/prayeron.data.png */ "./src/ability/actionbarimgs/prayeron.data.png"),
    sumpoints: __webpack_require__(/*! ./actionbarimgs/sumpoints.data.png */ "./src/ability/actionbarimgs/sumpoints.data.png"),
});
class ActionbarReader {
    constructor() {
        this.pos = null;
    }
    find(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        if (!img) {
            return false;
        }
        var sumpos = img.findSubimage(imgs.sumpoints);
        if (sumpos.length == 0) {
            return false;
        }
        var hppos = img.findSubimage(imgs.lifepoints);
        if (hppos.length == 0) {
            hppos = img.findSubimage(imgs.lifepointspoison);
        }
        if (hppos.length == 0) {
            return false;
        }
        var layout = null;
        for (var a in ActionbarReader.layouts) {
            var l = ActionbarReader.layouts[a];
            if (sumpos[0].x - hppos[0].x == l.sum.x - l.hp.x && sumpos[0].y - hppos[0].y == l.sum.y - l.hp.y) {
                layout = l;
                break;
            }
        }
        if (!layout) {
            return false;
        }
        this.pos = {
            x: hppos[0].x - layout.hp.x,
            y: hppos[0].y - layout.hp.y,
            layout: layout
        };
        return true;
    }
    read(buffer, bufx, bufy) {
        if (!this.pos) {
            throw new Error("interface is not found yet");
        }
        if (!buffer) {
            //TODO fix the capture dimensions!!!
            let fixoffset = 10;
            buffer = a1lib.capture(this.pos.x, this.pos.y - fixoffset, this.pos.layout.width, this.pos.layout.height + fixoffset);
            bufx = this.pos.x;
            bufy = this.pos.y - fixoffset;
        }
        var dx = this.pos.x - bufx;
        var dy = this.pos.y - bufy;
        var hptext = this.readBarNumber(buffer, this.pos.layout.hp.x + dx, this.pos.layout.hp.y + dy, this.pos.layout.hor);
        var drentext = this.readBarNumber(buffer, this.pos.layout.dren.x + dx, this.pos.layout.dren.y + dy, this.pos.layout.hor);
        var sumtext = this.readBarNumber(buffer, this.pos.layout.sum.x + dx, this.pos.layout.sum.y + dy, this.pos.layout.hor);
        var praytext = this.readBarNumber(buffer, this.pos.layout.pray.x + dx, this.pos.layout.pray.y + dy, this.pos.layout.hor);
        var hpbar = this.readBar(buffer, this.pos.layout.hp.x + dx, this.pos.layout.hp.y + dy, this.pos.layout.hor);
        var drenbar = this.readBar(buffer, this.pos.layout.dren.x + dx, this.pos.layout.dren.y + dy, this.pos.layout.hor);
        var praybar = this.readBar(buffer, this.pos.layout.pray.x + dx, this.pos.layout.pray.y + dy, this.pos.layout.hor);
        var sumbar = this.readBar(buffer, this.pos.layout.sum.x + dx, this.pos.layout.sum.y + dy, this.pos.layout.hor);
        return {
            hp: (hptext ? hptext.cur / hptext.max : hpbar),
            dren: (drentext ? drentext.cur / drentext.max : drenbar),
            sum: (sumtext ? sumtext.cur / sumtext.max : sumbar),
            pray: (praytext ? praytext.cur / praytext.max : praybar),
            exacthp: hptext,
            exactdren: drentext,
            exactpray: praytext,
            exactsum: sumtext
        };
    }
    readBarNumber(buffer, x, y, hor) {
        if (hor) {
            var line = OCR.readLine(buffer, chatfont, [255, 255, 255], x + 22, y + 5, true, false);
            var m = line.text.match(/^(\d+)(\/(\d+)|%)$/);
            if (m) {
                return { cur: +m[1], max: (m[2] == "%" ? 100 : +m[3]) };
            }
        }
        return null;
    }
    readBar(buffer, x, y, hor) {
        if (!this.pos) {
            throw new Error("interface not found yet");
        }
        if (hor) {
            x += 25;
            y += 11;
        }
        else {
            x += 7;
            y += 26;
        }
        var width = this.pos.layout.barlength;
        for (var b = 0; b < width; b++) {
            var i = buffer.pixelOffset(x + (hor ? b : 0), y + (hor ? 0 : b));
            if (a1lib.ImageDetect.coldif(buffer.data[i], buffer.data[i + 1], buffer.data[i + 2], 25, 31, 34, 255) < 20) {
                break;
            }
        }
        return b / width;
    }
    static getCurrentLayoutData(img) {
        img !== null && img !== void 0 ? img : (img = a1lib.captureHoldFullRs());
        var matches = {
            hp: a1lib.findSubimage(img, imgs.lifepoints)[0],
            dren: a1lib.findSubimage(img, imgs.dren)[0],
            pray: a1lib.findSubimage(img, imgs.prayer)[0],
            sum: a1lib.findSubimage(img, imgs.sumpoints)[0]
        };
        var layout = {
            hp: { x: matches.hp.x - matches.hp.x, y: matches.hp.y - matches.hp.y },
            dren: { x: matches.dren.x - matches.hp.x, y: matches.dren.y - matches.hp.y },
            pray: { x: matches.pray.x - matches.hp.x, y: matches.pray.y - matches.hp.y },
            sum: { x: matches.sum.x - matches.hp.x, y: matches.sum.y - matches.hp.y }
        };
        return JSON.stringify(layout);
    }
}
ActionbarReader.layouts = {
    mainflat: { hp: { x: 0, y: 0 }, dren: { x: 119, y: 0 }, pray: { x: 238, y: 0 }, sum: { x: 357, y: 0 }, width: 470, height: 25, hor: true, barlength: 80, type: "mainflat" },
    mainhor: { hp: { x: 0, y: 0 }, dren: { x: 102, y: 0 }, pray: { x: 16, y: 22 }, sum: { x: 118, y: 22 }, width: 210, height: 45, hor: true, barlength: 62, type: "mainhor" },
    mainver: { hp: { x: 0, y: 0 }, dren: { x: 0, y: 100 }, pray: { x: 22, y: 16 }, sum: { x: 22, y: 116 }, width: 35, height: 210, hor: false, barlength: 62, type: "mainver" },
    maintower: { hp: { x: 0, y: 0 }, dren: { x: 0, y: 119 }, pray: { x: 0, y: 238 }, sum: { x: 0, y: 357 }, width: 20, height: 465, hor: false, barlength: 80, type: "maintower" }
};
exports["default"] = ActionbarReader;


/***/ }),

/***/ "./src/ability/index.ts":
/*!******************************!*\
  !*** ./src/ability/index.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbilityState = exports.ActionbarReader = void 0;
const a1lib = __importStar(__webpack_require__(/*! alt1/base */ "alt1/base"));
const OCR = __importStar(__webpack_require__(/*! alt1/ocr */ "alt1/ocr"));
const actionbar_1 = __importDefault(__webpack_require__(/*! ./actionbar */ "./src/ability/actionbar.ts"));
const base_1 = __webpack_require__(/*! alt1/base */ "alt1/base");
var actionbar_2 = __webpack_require__(/*! ./actionbar */ "./src/ability/actionbar.ts");
Object.defineProperty(exports, "ActionbarReader", ({ enumerable: true, get: function () { return __importDefault(actionbar_2).default; } }));
;
var cdfont = __webpack_require__(/*! ../fonts/pixel_8px_digits.fontmeta.json */ "./src/fonts/pixel_8px_digits.fontmeta.json");
var hotkeyfont = __webpack_require__(/*! ../fonts/aa_8px.fontmeta.json */ "./src/fonts/aa_8px.fontmeta.json");
var imgs = (0, base_1.webpackImages)({
    settingscog: __webpack_require__(/*! ./imgs/settingscog.data.png */ "./src/ability/imgs/settingscog.data.png"),
    smallbarnumber: __webpack_require__(/*! ./imgs/smallbarnumber.data.png */ "./src/ability/imgs/smallbarnumber.data.png"),
    actionbarnumbers: __webpack_require__(/*! ./imgs/actionbarnumbers.data.png */ "./src/ability/imgs/actionbarnumbers.data.png")
});
var barnumimgs = null;
var barnummap = {};
imgs.promise.then(() => {
    barnumimgs = base_1.ImageDetect.ImageDataSet.fromFilmStrip(imgs.actionbarnumbers, 10);
    for (let a = 0; a < 13; a++) {
        barnummap[a] = (a + 1) + "";
    }
});
class AbilityReader {
    constructor(abilityimgs) {
        this.bars = [];
        this.mainbar = null;
        this.barstates = {};
        this.captureRect = null;
        this.actionbarReader = new actionbar_1.default();
        this.abilityimgs = null;
        this.lifestate = null;
        //event when ocluded bar is visible again, before any further reading happens
        this.hooks = {
            onbarshown: null
        };
        this.abilityimgs = abilityimgs;
    }
    find(img) {
        if (!img) {
            img = a1lib.captureHoldFullRs();
        }
        this.bars = [];
        var locs = img.findSubimage(imgs.smallbarnumber);
        var cog = imgs.settingscog;
        for (var loc of locs) {
            for (var key in AbilityBar.types) {
                var t = AbilityBar.types[key];
                if (!t.cog) {
                    continue;
                }
                var rect = new base_1.Rect(loc.x - t.detect.x + t.cog.x, loc.y - t.detect.y + t.cog.y, cog.width, cog.height);
                if (base_1.Rect.fromArgs(img).contains(rect)) {
                    var buf = img.read(loc.x - t.detect.x + t.cog.x, loc.y - t.detect.y + t.cog.y, cog.width, cog.height);
                    if (buf.pixelCompare(cog) < 10) {
                        var bar = new AbilityBar(this, loc.x - t.detect.x, loc.y - t.detect.y, t, this.barstates);
                        bar.overlay();
                        this.bars.push(bar);
                        break;
                    }
                }
            }
        }
        this.actionbarReader.find(img);
        if (this.actionbarReader.pos) {
            var mainpos = this.actionbarReader.pos;
            var t = AbilityBar.types[mainpos.layout.type];
            var bar = new AbilityBar(this, mainpos.x - t.action.x, mainpos.y - t.action.y, AbilityBar.types[mainpos.layout.type], this.barstates);
            bar.overlay();
            this.bars.unshift(bar);
            this.mainbar = bar;
        }
        if (this.bars.length == 0) {
            return null;
        }
        this.captureRect = a1lib.Rect.fromArgs(this.bars[0].bounds);
        for (var i = 1; i < this.bars.length; i++) {
            this.captureRect.union(this.bars[i].bounds);
        }
        return this.bars.length;
    }
    getCaptAreas() {
        var r = {};
        for (var b in this.bars) {
            r["bar" + b] = this.bars[b].bounds;
        }
        return r;
    }
    /**
     * @deprecated kinda needs rewrite to be efficient, use readallslotsinner manually instead
     * @param img
     */
    readAllSlots(img) {
        var data;
        if (!this.captureRect) {
            throw new Error("no capturerect set ");
        }
        if (img instanceof base_1.ImgRef) {
            data = img.toData(this.captureRect.x, this.captureRect.y, this.captureRect.width, this.captureRect.height);
        }
        else {
            data = a1lib.capture(this.captureRect.x, this.captureRect.y, this.captureRect.width, this.captureRect.height);
        }
        var capts = {};
        var captareas = {};
        for (var a in this.bars) {
            capts["bar" + a] = data;
            captareas["bar" + a] = this.captureRect;
        }
        return this.readAllSlotsInner(capts, captareas);
    }
    readAllSlotsInner(capts, captareas) {
        var visiblebars = [];
        for (var b in this.bars) {
            var bar = this.bars[b];
            var capt = capts["bar" + b];
            var captarea = captareas["bar" + b];
            var nr = bar.readBarNr(capt, captarea.x, captarea.y);
            if (!nr) {
                continue;
            }
            var state = this.barstates[nr];
            visiblebars.push(state);
            if (!state.visible && this.hooks.onbarshown) {
                this.hooks.onbarshown(state);
            }
            for (var a = 0; a < bar.slots.length; a++) {
                state.slots[a].readAbility(capt, bar.slots[a].x - captarea.x, bar.slots[a].y - captarea.y);
            }
        }
        for (var id in this.barstates) {
            var barstate = this.barstates[id];
            barstate.visible = visiblebars.indexOf(this.barstates[id]) != -1;
        }
    }
    finishTick() {
        for (var b in this.barstates) {
            var bar = this.barstates[b];
            for (var slot of bar.slots) {
                slot.lastcooldown = slot.cooldown;
                slot.lasttickcooldown = slot.tickcooldown;
            }
        }
    }
    readLife(buffer, bufx, bufy) {
        if (this.actionbarReader.pos == null) {
            return null;
        }
        this.lifestate = this.actionbarReader.read(buffer, bufx, bufy);
        return this.lifestate;
    }
    overlayState() {
        alt1.overLaySetGroup("abildebug");
        alt1.overLayFreezeGroup("abildebug");
        alt1.overLayClearGroup("abildebug");
        for (var bar of this.bars) {
            var state = this.barstates[bar.barid];
            if (state) {
                for (var a = 0; a < bar.slots.length; a++) {
                    state.slots[a].overlayState(bar.slots[a].x, bar.slots[a].y);
                }
            }
        }
        alt1.overLayRefreshGroup("abildebug");
    }
    *visibleAbilities() {
        for (var bar of this.bars) {
            if (bar.barid) {
                yield* this.barstates[bar.barid].slots;
            }
        }
    }
    *allAbilities() {
        for (var barid in this.barstates) {
            var bar = this.barstates[barid];
            yield* bar.slots;
        }
    }
    *mainbarAbilities() {
        if (this.mainbar) {
            var bar = this.barstates[this.mainbar.barid];
            if (bar) {
                yield* bar.slots;
            }
        }
    }
    *allslots() {
        for (var bar of this.bars) {
            yield* bar.slots;
        }
    }
}
AbilityReader.imgs = {
    smallbarnumber: null,
    settingscog: null
};
exports["default"] = AbilityReader;
;
class AbilityBarSlot {
    constructor(x, y, index, bar) {
        this.x = x;
        this.y = y;
        this.index = index;
        this.bar = bar;
    }
    getState() {
        return this.bar.barstates[this.bar.barid].slots[this.index];
    }
}
class AbilityBar {
    constructor(reader, x, y, layout, barstates) {
        this.barid = ""; //TODO find out when and where this is assigned, currently no proper initialization
        this.slots = [];
        this.reader = reader;
        this.layout = layout;
        this.barstates = barstates;
        this.x = x;
        this.y = y;
        var bounds = new base_1.Rect(this.x + layout.num.x, this.y + layout.num.y, 10, 15);
        var cx = x;
        var cy = y;
        for (var a = 0; a < layout.length; a++) {
            this.slots.push(new AbilityBarSlot(cx, cy, a, this));
            bounds.union(new base_1.Rect(cx, cy, AbilityState.iconwidth, AbilityState.iconheight));
            cx += layout.step.x;
            cy += layout.step.y;
            if ((a + 1) % layout.rowlen == 0) {
                cx += layout.rowstep.x - layout.rowlen * layout.step.x;
                cy += layout.rowstep.y - layout.rowlen * layout.step.y;
            }
        }
        if (layout.action) {
            var mainlayout = actionbar_1.default.layouts[layout.id];
            var mainrect = new a1lib.Rect(x + layout.action.x, y + layout.action.y, mainlayout.width, mainlayout.height);
            mainrect.inflate(10, 10);
            bounds.union(mainrect);
        }
        this.bounds = bounds;
    }
    readBarNr(buffer, bufx, bufy) {
        let match = barnumimgs.matchBest(buffer, this.x + this.layout.num.x - bufx, this.y + this.layout.num.y - bufy);
        //1st secondary ability bar has one pixel offset!!@#!@#
        match = match || barnumimgs.matchBest(buffer, this.x + this.layout.num.x - bufx, this.y + this.layout.num.y - bufy - 1);
        if (!match) {
            return "";
        }
        this.barid = barnummap[match.index];
        if (!this.barstates[this.barid]) {
            this.barstates[this.barid] = { barid: this.barid, slots: [], visible: false };
            for (var b = 0; b < this.layout.length; b++) {
                this.barstates[this.barid].slots[b] = new AbilityState(this.reader);
            }
        }
        return this.barid;
    }
    overlay() {
        if (a1lib.hasAlt1) {
            alt1.overLayRect(a1lib.mixColor(255, 255, 255), this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height, 3000, 2);
        }
    }
}
AbilityBar.types = {
    flat: { id: "flat", sec: true, step: { x: 36, y: 0 }, rowstep: { x: 0, y: 0 }, rowlen: 14, length: 14, cog: { x: 504, y: 17 }, detect: { x: 501, y: -2 }, num: { x: 503, y: 2 } },
    hor: { id: "hor", sec: true, step: { x: 35, y: 0 }, rowstep: { x: 0, y: 35 }, rowlen: 7, length: 14, cog: { x: 245, y: 54 }, detect: { x: 242, y: -1 }, num: { x: 244, y: 3 } },
    ver: { id: "ver", sec: true, step: { x: 0, y: 35 }, rowstep: { x: 35, y: 0 }, rowlen: 7, length: 14, cog: { x: 56, y: 245 }, detect: { x: -3, y: 242 }, num: { x: -1, y: 246 } },
    tower: { id: "tower", sec: true, step: { x: 0, y: 36 }, rowstep: { x: 0, y: 0 }, rowlen: 14, length: 14, cog: { x: 20, y: 504 }, detect: { x: -3, y: 501 }, num: { x: -1, y: 505 } },
    mainflat: { id: "mainflat", sec: false, step: { x: 36, y: 0 }, rowstep: { x: 0, y: 0 }, rowlen: 14, length: 14, detect: { x: 12, y: -29 }, action: { x: 54, y: -31 }, num: { x: 14, y: -25 } },
    mainhor: { id: "mainhor", sec: false, step: { x: 36, y: 0 }, rowstep: { x: 0, y: 36 }, rowlen: 7, length: 14, detect: { x: 10, y: -45 }, action: { x: 43, y: -47 }, num: { x: 12, y: -41 } },
    mainver: { id: "mainver", sec: false, step: { x: 0, y: 35 }, rowstep: { x: 35, y: 0 }, rowlen: 7, length: 14, detect: { x: 84, y: 232 }, action: { x: 75, y: 10 }, num: { x: 86, y: 236 } },
    maintower: { id: "maintower", sec: false, step: { x: 0, y: 36 }, rowstep: { x: 0, y: 0 }, rowlen: 14, length: 14, detect: { x: 40, y: 15 }, action: { x: 43, y: 45 }, num: { x: 42, y: 19 } },
};
class AbilityState {
    constructor(reader) {
        //internal
        this.nextdetecttry = 0; //timestamp of next ability read attempt
        //stateful
        this.lastcooldown = -1; //cooldown at last confirmed tick
        this.lasttickcooldown = -1; //number of ticks cooldown on last comfirmed read
        this.tickcooldown = 0; //number of ticks left on cooldown
        this.cdchange = 0; //cd change since last tick
        this.gcd = true; //current cooldown is coused by global cooldown and is 1.8sec
        this.donetime = 0; //timestamp of when cd will be done
        this.hadcd = false; //has been on cooldown in the last minute
        //only function of pixel
        this.cooldown = 0; //current visible cooldown (whole sec)
        this.available = false; //false if the ability can't be used even when off cd (wrong weapon)
        this.cdfraction = -1; //fraction of cooldown completed as read by darker pixel clock
        this.ability = null; //the detected ability 
        this.hotkey = ""; //hotkey text of ability
        this.reader = null;
        this.debug = null;
        this.reader = reader;
    }
    readAbility(data, x, y) {
        var res = OCR.readLine(data, cdfont, [206, 213, 135], x + 31, y + 8, false, true);
        var t = 0;
        if (res.text == "") {
            //don't trust a failed read as "0", only read it as 0 if we have a pixel match on the icon in the cd area
            var allow = this.cooldown <= 1 || this.ability && this.confirmCdArea(data, x, y);
            t = (allow ? 0 : Math.ceil((this.lasttickcooldown - 1) * 0.6));
        }
        else if (res.text.endsWith("m")) {
            t = 60 * +res.text.slice(0, -1);
        }
        else {
            t = +res.text;
        }
        var now = Date.now();
        this.cdchange = (this.lastcooldown != -1 ? t - this.lastcooldown : 0);
        this.cooldown = t;
        if (this.cdchange >= 1) {
            this.gcd = this.cooldown <= 2;
        }
        if (this.cooldown != Math.ceil((this.lasttickcooldown - 1) * 0.6)) {
            var tickcd = Math.floor(this.cooldown / 0.6);
            //detect 2nd tick in same second
            if (this.cooldown != 0 && this.cdchange == 0 && Math.ceil(tickcd * 0.6) == Math.ceil((tickcd - 1) * 0.6)) {
                tickcd--;
            }
            this.tickcooldown = tickcd;
        }
        else {
            this.tickcooldown--;
        }
        if (this.cooldown != 0) {
            this.donetime = now + this.cooldown * 1000;
        }
        this.hadcd = this.donetime - now > -60 * 1000;
        this.cdfraction = -1;
        this.debug = null;
        if (!this.ability && this.nextdetecttry < now) {
            this.ability = this.getAbility(data, x, y);
            this.nextdetecttry = now + 1000 * 20 * (1 + Math.random()); //5-10 sec delay to spread load
        }
        if (this.ability) {
            this.readClock(data, x, y);
            if (!this.hotkey && this.available) {
                this.readhotkey(data, x, y);
            }
        }
        //if (this.ability && this.ability.id == "immortality") { console.log(this.tickcooldown, this.cooldown, this.cdchange); }
    }
    confirmCdArea(buffer, x, y) {
        var icon = this.ability.icon;
        for (var dy = 1; dy < 10; dy++) {
            for (var dx = 24; dx < 30; dx++) {
                var i1 = (x + dx) * 4 + (y + dy) * 4 * buffer.width;
                var i2 = dx * 4 + dy * 4 * icon.width;
                //calculate portion of icon color vs pure white per channel
                var gradr = (255 - buffer.data[i1]) / (255 - icon.data[i2]);
                var gradg = (255 - buffer.data[i1 + 1]) / (255 - icon.data[i2 + 1]);
                var gradb = (255 - buffer.data[i1 + 2]) / (255 - icon.data[i2 + 2]);
                //if it's a pure mix of white and the icon, all channels will have the same portion of white
                var d = Math.max(gradr, gradg, gradb) - Math.min(gradr, gradg, gradb);
                if (d > 0.25) {
                    return false;
                }
            }
        }
        return true;
    }
    readClock(buf, abilx, abily) {
        var alpha = 0.20;
        var size = 30;
        var template = this.ability.icon;
        var dirs = [
            { n: size / 2, ox: size / 2, oy: 0, sx: 1, sy: 0 },
            { n: size, ox: size - 1, oy: 1, sx: 0, sy: 1 },
            { n: size, ox: size - 1, oy: size - 1, sx: -1, sy: 0 },
            { n: size, ox: 0, oy: size - 1, sx: 0, sy: -1 },
            { n: size / 2, ox: 0, oy: 0, sx: 1, sy: 0 }
        ];
        var pixels = 0;
        var nbright = 0;
        var nmatch = 0;
        var lastbright = 0;
        var streak = 10;
        var lumpixels = 0;
        var lummatch = 0;
        var nwhite = 0;
        if (AbilityState.overlayState) {
            this.debug = new ImageData(30, 30);
        }
        for (var dir of dirs) {
            for (var a = 0; a < dir.n; a++) {
                var x = dir.ox + a * dir.sx;
                var y = dir.oy + a * dir.sy;
                var i1 = (abilx + x) * 4 + (abily + y) * buf.width * 4;
                var i2 = x * 4 + y * template.width * 4;
                var lum = template.data[i2] + template.data[i2 + 1] + template.data[i2 + 2];
                var imglum = buf.data[i1] + buf.data[i1 + 1] + buf.data[i1 + 2];
                var d1 = Math.abs(buf.data[i1] - template.data[i2]) + Math.abs(buf.data[i1 + 1] - template.data[i2 + 1]) + Math.abs(buf.data[i1 + 2] - template.data[i2 + 2]);
                var d2 = Math.abs(buf.data[i1] - template.data[i2] * alpha) + Math.abs(buf.data[i1 + 1] - template.data[i2 + 1] * alpha) + Math.abs(buf.data[i1 + 2] - template.data[i2 + 2] * alpha);
                var match = d1 < 5 || d2 < 5;
                if (match) {
                    if (d1 < d2) {
                        if (d2 >= 5) {
                            streak++;
                            nbright++;
                        }
                        if (streak > 5) {
                            lastbright = pixels;
                        }
                    }
                    else {
                        streak = 0;
                    }
                    nmatch++;
                }
                if (lum > 30) {
                    if (match) {
                        lummatch++;
                    }
                    lumpixels++;
                }
                if (imglum > 70 * 3) {
                    nwhite++;
                }
                //this.debug.setPixel(x, y, [d1, d2, 0, 255]);
                if (AbilityState.overlayState) {
                    this.debug.setPixel(x, y, (d1 < 5 || d2 < 5 ? (d1 < d2 ? [255, 255, 255, 255] : [128, 128, 128, 255]) : [255, 0, 0, 255]));
                }
                pixels++;
            }
        }
        lastbright = Math.max(lastbright, nbright);
        this.cdfraction = -1;
        outer: for (var dir of dirs) {
            if (lastbright > dir.n) {
                lastbright -= dir.n;
            }
            else {
                var x = dir.ox + dir.sx * lastbright - size / 2;
                var y = dir.oy + dir.sy * lastbright - size / 2;
                if (AbilityState.overlayState) {
                    this.debug.setPixel(x + size / 2, y + size / 2, [0, 255, 255, 255]);
                }
                var angle = Math.atan2(y, x);
                this.cdfraction = (1.25 + angle / Math.PI / 2) % 1;
                break outer;
            }
        }
        var avail = false;
        if (lummatch / lumpixels > 0.5) {
            if (this.cooldown == 2 && this.cdchange != 0) {
                avail = true;
            }
            else if (this.cdfraction > 0.2) {
                avail = true;
            }
            else if (this.gcd && this.cooldown > 2) {
                avail = true;
            }
            else if (!this.gcd && this.cooldown > this.ability.cooldown * 0.6) {
                avail = true;
            }
        }
        if (avail) {
            this.available = true;
        }
        else if (nwhite / pixels < 0.7) {
            this.available = false;
        } //keep old value if the icon is flashed white
    }
    readhotkey(buf, abilx, abily) {
        var col = [255, 255, 255];
        var line1 = OCR.readLine(buf, hotkeyfont, col, abilx + 2, abily + 26, true, false);
        if (line1.text) {
            var line2 = OCR.readLine(buf, hotkeyfont, col, abilx + 2, abily + 15, true, false);
            if (line2.text) {
                this.hotkey = line2.text + " " + line1.text;
            }
            else {
                this.hotkey = line1.text;
            }
        }
    }
    overlayState(x, y) {
        if (this.available) {
            var angle = (0.75 + this.cdfraction) * Math.PI * 2;
            alt1.overLayLine(a1lib.mixColor(255, 0, 0), 1, x + 15, y + 15, x + 15 + Math.round(Math.cos(angle) * 15), y + 15 + Math.round(Math.sin(angle) * 15), 600);
        }
        if (!this.available) {
            alt1.overLayRect((this.ability ? a1lib.mixColor(255, 0, 0) : a1lib.mixColor(1, 1, 1)), x - 1, y - 1, 32, 32, 600, 1);
        }
        alt1.overLayText(this.tickcooldown + "", a1lib.mixColor(255, 255, 0), 7, x, y, 600);
        //alt1.overLayText(this.matchpercent.toFixed(2), a1lib.mixColor(255, 255, 0), 7, x, y, 600);
        //alt1.overLayText(this.cdfraction.toFixed(2), a1lib.mixColor(255, 255, 0), 7, x, y + 15, 600);
        //if (this.cooldown != 0 && this.gcd) { alt1.overLayText("gcd", a1lib.mixColor(255, 255, 0), 8, x, y, 600); }
        //alt1.overLayText(this.hotkey || "?", a1lib.mixColor(255, 255, 255), 11, x + 12, y + 12, 600);
        //if (this.debug) { alt1.overLayImage(x, y, a1lib.encodeImageString(this.debug), this.debug.width, 600); }
    }
    getAbility(buf, abilx, abily) {
        var a = 0.20;
        var best = null;
        var bestscore = 30 * 30 * 10;
        for (var abil of this.reader.abilityimgs) {
            var icon = abil.icon;
            var score = 0;
            for (var x = 0; x < 30; x++) {
                for (var y = 0; y < 30; y++) {
                    var i1 = (x + abilx) * 4 + (y + abily) * 4 * buf.width;
                    var i2 = x * 4 + y * 4 * icon.width;
                    var d1 = Math.abs(buf.data[i1] - icon.data[i2]) + Math.abs(buf.data[i1 + 1] - icon.data[i2 + 1]) + Math.abs(buf.data[i1 + 2] - icon.data[i2 + 2]);
                    var d2 = Math.abs(buf.data[i1] - icon.data[i2] * a) + Math.abs(buf.data[i1 + 1] - icon.data[i2 + 1] * a) + Math.abs(buf.data[i1 + 2] - icon.data[i2 + 2] * a);
                    var d = Math.min(d1, d2, 20);
                    score += d;
                }
            }
            if (score < bestscore) {
                bestscore = score;
                best = abil;
            }
        }
        return best;
    }
}
exports.AbilityState = AbilityState;
AbilityState.iconwidth = 30 + 1; //the cooldown text overlays the box by one pixel
AbilityState.iconheight = 30 + 1; //also need one extra px here to read the hotkey
AbilityState.overlayState = false;


/***/ }),

/***/ "alt1/base":
/*!**************************************************************************************************!*\
  !*** external {"root":"A1lib","commonjs2":"alt1/base","commonjs":"alt1/base","amd":"alt1/base"} ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_base__;

/***/ }),

/***/ "alt1/ocr":
/*!*********************************************************************************************!*\
  !*** external {"root":"OCR","commonjs2":"alt1/ocr","commonjs":"alt1/ocr","amd":"alt1/ocr"} ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_alt1_ocr__;

/***/ }),

/***/ "./src/fonts/aa_8px.fontmeta.json":
/*!****************************************!*\
  !*** ./src/fonts/aa_8px.fontmeta.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":140,"chr":"a","pixels":[0,7,187,255,1,3,221,255,1,6,169,255,1,7,164,132,1,8,255,255,2,3,255,255,2,4,221,0,2,5,196,243,2,7,170,0,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,5,255,255,3,6,187,0,3,8,221,255,3,9,255,0,4,4,254,239,4,5,255,255,4,6,254,204,4,7,255,255,4,8,240,253,4,9,221,0,5,5,240,36,5,6,255,34,5,7,211,41,5,8,255,34,5,9,238,0],"secondary":false},{"width":7,"bonus":175,"chr":"b","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,248,209,1,4,243,178,1,5,230,75,1,6,230,75,1,7,243,178,1,8,246,194,1,9,204,0,2,3,255,255,2,4,204,0,2,5,170,0,2,8,255,255,2,9,187,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,169,255,4,4,254,171,4,7,169,255,4,9,255,0,5,4,204,128,5,5,232,205,5,6,205,233,5,8,170,0,6,6,187,0,6,7,187,0],"secondary":false},{"width":7,"bonus":95,"chr":"c","pixels":[0,5,169,255,0,6,187,255,1,4,187,255,1,6,193,90,1,7,237,201,1,8,164,185,2,3,255,255,2,5,187,0,2,8,255,255,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,221,255,4,4,255,34,4,8,221,255,4,9,255,0,5,4,226,39,5,9,221,0],"secondary":false},{"width":7,"bonus":180,"chr":"d","pixels":[0,5,187,255,0,6,187,255,1,4,169,255,1,6,205,85,1,7,232,187,1,8,203,213,2,3,255,255,2,5,170,0,2,8,255,255,2,9,170,0,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,4,3,203,255,4,4,254,171,4,7,169,255,4,8,187,255,4,9,255,0,5,1,203,255,5,2,225,251,5,3,225,251,5,4,248,227,5,5,244,231,5,6,230,245,5,7,230,245,5,8,237,219,5,9,187,0,6,2,204,0,6,3,221,0,6,4,221,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":7,"bonus":135,"chr":"e","pixels":[0,5,187,255,0,6,169,255,1,4,187,255,1,5,255,255,1,6,209,104,1,7,237,219,2,3,255,255,2,5,255,255,2,6,255,0,2,8,255,255,3,3,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,3,187,255,4,4,255,119,4,5,255,255,4,6,255,0,4,8,221,255,4,9,255,0,5,4,224,155,5,5,227,229,5,6,255,0,5,9,221,0,6,6,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"f","pixels":[0,3,203,255,1,2,221,255,1,3,255,255,1,4,248,227,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,2,1,255,255,2,3,255,255,2,4,255,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0,3,2,255,0,3,4,255,0],"secondary":false},{"width":7,"bonus":200,"chr":"g","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,232,187,1,8,184,189,1,11,153,255,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,11,245,247,3,3,255,255,3,4,255,0,3,8,255,255,3,9,255,0,3,11,221,255,4,3,221,255,4,4,255,136,4,7,153,255,4,8,221,255,4,9,255,85,4,10,203,255,5,3,203,255,5,4,250,226,5,5,239,236,5,6,230,245,5,7,230,245,5,8,241,234,5,9,243,178,5,11,204,0,6,4,204,0,6,5,221,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,221,0,6,10,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"h","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,243,178,1,4,248,209,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,170,0,2,5,204,0,3,3,255,255,3,4,255,0,4,3,169,255,4,4,255,221,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,175,25,5,5,226,39,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0],"secondary":false},{"width":3,"bonus":70,"chr":"i","pixels":[0,1,237,255,0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,238,0,1,4,211,41,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0],"secondary":false},{"width":4,"bonus":90,"chr":"j","pixels":[0,11,153,255,1,11,169,255,2,1,203,255,2,3,203,255,2,4,225,251,2,5,225,251,2,6,225,251,2,7,225,251,2,8,225,251,2,9,225,251,3,2,204,0,3,4,204,0,3,5,221,0,3,6,221,0,3,7,221,0,3,8,221,0,3,9,221,0,3,10,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"k","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,166,235,2,5,255,255,2,6,255,221,3,3,203,255,3,5,153,0,3,6,255,51,3,7,250,226,3,8,160,217,4,4,204,0,4,8,239,145],"secondary":false},{"width":3,"bonus":75,"chr":"l","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,2,9,255,0],"secondary":false},{"width":10,"bonus":210,"chr":"m","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,230,75,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,153,255,4,4,255,255,4,5,221,255,4,6,221,255,4,7,221,255,4,8,203,255,5,4,228,209,5,5,255,68,5,6,226,39,5,7,226,39,5,8,226,39,5,9,204,0,6,3,255,255,6,5,187,0,7,3,237,255,7,4,255,85,8,4,249,174,8,5,232,243,8,6,225,251,8,7,225,251,8,8,210,247,9,5,170,0,9,6,221,0,9,7,221,0,9,8,221,0,9,9,204,0],"secondary":false},{"width":7,"bonus":140,"chr":"n","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,4,248,227,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,237,255,2,5,221,0,3,3,255,255,3,4,238,0,4,3,237,255,4,4,255,85,5,4,249,174,5,5,232,243,5,6,225,251,5,7,225,251,5,8,210,247,6,5,170,0,6,6,221,0,6,7,221,0,6,8,221,0,6,9,204,0],"secondary":false},{"width":8,"bonus":120,"chr":"o","pixels":[0,5,187,255,0,6,169,255,1,4,203,255,1,6,209,104,1,7,244,231,2,3,237,255,2,5,204,0,2,8,252,241,3,3,255,255,3,4,238,0,3,8,255,255,3,9,238,0,4,3,237,255,4,4,255,0,4,8,255,255,4,9,255,0,5,4,251,207,5,7,221,255,5,9,255,0,6,5,237,183,6,6,192,225,6,8,221,0,7,6,170,0,7,7,170,0],"secondary":false},{"width":6,"bonus":170,"chr":"p","pixels":[0,3,237,255,0,4,255,255,0,5,187,255,0,6,203,255,0,7,255,255,0,8,221,255,0,9,221,255,0,10,221,255,1,3,255,255,1,4,240,36,1,5,255,0,1,6,187,0,1,7,211,41,1,8,254,239,1,9,221,0,1,10,221,0,1,11,221,0,2,3,255,255,2,4,255,0,2,8,255,255,2,9,238,0,3,3,237,255,3,4,255,34,3,8,237,255,3,9,255,0,4,4,253,240,4,5,255,255,4,6,255,255,4,7,237,255,4,9,238,0,5,5,239,18,5,6,255,17,5,7,255,0,5,8,238,0],"secondary":false},{"width":7,"bonus":165,"chr":"q","pixels":[0,5,187,255,0,6,187,255,1,3,169,255,1,4,153,255,1,5,155,112,1,6,205,85,1,7,228,171,1,8,209,207,2,3,255,255,2,4,170,0,2,5,153,0,2,8,255,255,2,9,170,0,3,3,237,255,3,4,255,17,3,8,237,255,3,9,255,0,4,3,255,255,4,4,255,255,4,5,191,250,4,6,187,255,4,7,255,255,4,8,239,254,4,9,253,223,4,10,221,255,5,4,255,34,5,5,255,34,5,6,196,45,5,7,196,45,5,8,255,34,5,9,240,36,5,10,226,39,5,11,221,0],"secondary":false},{"width":4,"bonus":85,"chr":"r","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,3,187,255,1,4,244,213,1,5,232,93,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,255,2,4,187,0,2,5,204,0,3,4,255,0],"secondary":false},{"width":6,"bonus":100,"chr":"s","pixels":[0,4,187,255,1,3,255,255,1,5,250,243,1,8,255,255,2,3,255,255,2,4,255,0,2,5,155,196,2,6,246,123,2,8,255,255,2,9,255,0,3,3,255,255,3,4,255,0,3,6,245,247,3,7,164,132,3,8,255,255,3,9,255,0,4,4,255,17,4,7,250,191,4,9,255,0,5,8,187,0],"secondary":false},{"width":5,"bonus":80,"chr":"t","pixels":[1,2,221,255,1,3,255,255,1,4,235,240,1,5,221,255,1,6,221,255,1,7,169,255,2,3,255,255,2,4,255,34,2,5,226,39,2,6,226,39,2,7,232,93,2,8,249,243,3,4,255,0,3,8,187,209,3,9,238,0,4,9,153,0],"secondary":false},{"width":6,"bonus":135,"chr":"u","pixels":[0,3,203,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,169,255,1,4,211,41,1,5,226,39,1,6,226,39,1,7,232,93,1,8,249,243,2,8,255,255,2,9,238,0,3,8,203,255,3,9,255,0,4,3,203,255,4,4,221,255,4,5,221,255,4,6,203,255,4,7,255,255,4,8,228,247,4,9,204,0,5,4,211,41,5,5,226,39,5,6,226,39,5,7,211,41,5,8,255,34,5,9,221,0],"secondary":false},{"width":6,"bonus":95,"chr":"v","pixels":[0,3,237,255,1,4,247,141,1,5,245,247,1,6,203,255,2,6,241,54,2,7,255,255,2,8,255,255,3,5,153,255,3,6,255,255,3,7,173,226,3,8,255,51,3,9,255,0,4,3,237,255,4,4,203,255,4,6,153,0,4,7,255,0,4,8,153,0,5,4,238,0,5,5,204,0],"secondary":false},{"width":10,"bonus":170,"chr":"w","pixels":[1,3,153,255,1,4,243,249,1,5,187,255,2,4,153,0,2,5,243,71,2,6,228,171,2,7,243,249,2,8,187,255,3,6,217,239,3,7,248,244,3,8,248,157,3,9,187,0,4,3,169,255,4,4,255,255,4,7,204,0,4,8,238,0,4,9,153,0,5,4,244,231,5,5,255,221,5,6,191,159,6,5,223,19,6,6,237,128,6,7,255,255,6,8,223,253,7,6,239,254,7,7,227,229,7,8,255,119,7,9,221,0,8,3,237,255,8,4,203,255,8,7,238,0,8,8,204,0,9,4,238,0,9,5,204,0],"secondary":false},{"width":6,"bonus":95,"chr":"x","pixels":[0,8,169,255,1,3,169,255,1,4,224,232,1,7,221,255,1,9,170,0,2,4,193,90,2,5,255,255,2,6,240,253,2,8,221,0,3,4,255,255,3,5,155,196,3,6,255,187,3,7,250,191,4,3,221,255,4,5,255,0,4,7,209,104,4,8,255,255,5,4,221,0,5,9,255,0],"secondary":false},{"width":6,"bonus":110,"chr":"y","pixels":[0,3,255,255,0,4,153,255,0,11,221,255,1,4,255,85,1,5,234,222,1,6,228,247,1,11,196,243,2,6,207,21,2,7,246,194,2,8,255,255,2,9,237,255,3,6,237,255,3,7,191,250,3,8,205,85,3,9,255,0,3,10,238,0,4,3,203,255,4,4,221,255,4,7,238,0,4,8,187,0,5,4,204,0,5,5,221,0],"secondary":false},{"width":6,"bonus":130,"chr":"z","pixels":[0,3,153,255,0,8,203,255,1,3,255,255,1,4,153,0,1,7,221,255,1,8,255,255,1,9,204,0,2,3,255,255,2,4,255,0,2,6,255,255,2,8,255,255,2,9,255,0,3,3,255,255,3,4,254,171,3,5,169,255,3,7,255,0,3,8,255,255,3,9,255,0,4,3,255,255,4,4,255,119,4,5,170,0,4,6,170,0,4,8,255,255,4,9,255,0,5,4,255,0,5,9,255,0],"secondary":false},{"width":8,"bonus":155,"chr":"A","pixels":[0,8,153,255,1,6,221,255,1,7,237,255,1,9,153,0,2,3,169,255,2,4,255,255,2,5,187,255,2,6,255,255,2,7,221,0,2,8,238,0,3,1,255,255,3,2,255,255,3,4,170,0,3,5,255,0,3,6,255,255,3,7,255,0,4,2,255,255,4,3,254,239,4,4,184,189,4,6,255,255,4,7,255,0,5,3,255,34,5,4,247,141,5,5,255,255,5,6,255,255,5,7,255,102,6,6,255,85,6,7,255,187,6,8,255,255,7,8,187,0,7,9,255,0],"secondary":false},{"width":7,"bonus":225,"chr":"B","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,4,255,255,2,5,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,1,221,255,4,2,255,85,4,4,255,255,4,5,254,171,4,8,203,255,4,9,255,0,5,2,243,178,5,3,198,219,5,5,255,102,5,6,232,205,5,7,180,217,5,9,204,0,6,3,170,0,6,4,170,0,6,7,187,0,6,8,153,0],"secondary":false},{"width":9,"bonus":155,"chr":"C","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,3,153,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,224,232,2,1,169,255,2,3,221,0,2,4,153,0,2,7,194,135,2,8,237,183,3,1,255,255,3,2,170,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,169,255,6,2,255,102,6,8,169,255,6,9,255,0,7,2,181,48,7,9,170,0],"secondary":false},{"width":8,"bonus":200,"chr":"D","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,8,255,255,3,9,255,0,4,1,203,255,4,2,255,68,4,8,203,255,4,9,255,0,5,2,248,227,5,3,168,207,5,7,221,255,5,9,204,0,6,3,237,128,6,4,223,214,6,5,205,233,6,6,155,196,6,8,221,0,7,5,187,0,7,6,187,0],"secondary":false},{"width":6,"bonus":180,"chr":"E","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,3,8,255,255,3,9,255,0,4,1,153,255,4,2,255,0,4,6,255,0,4,8,221,255,4,9,255,0,5,2,153,0,5,9,221,0],"secondary":false},{"width":6,"bonus":135,"chr":"F","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,2,255,0,4,6,255,0],"secondary":false},{"width":9,"bonus":200,"chr":"G","pixels":[0,4,169,255,0,5,187,255,1,2,203,255,1,3,153,255,1,5,193,90,1,6,224,155,1,7,237,238,2,1,169,255,2,3,204,0,2,4,153,0,2,7,175,124,2,8,246,194,3,1,255,255,3,2,170,0,3,8,255,255,3,9,187,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,237,255,5,9,255,0,6,1,169,255,6,2,255,85,6,5,255,255,6,7,153,255,6,8,169,255,6,9,238,0,7,2,175,25,7,5,153,255,7,6,255,221,7,7,225,251,7,8,234,222,7,9,170,0,8,6,153,0,8,7,221,0,8,8,221,0,8,9,204,0],"secondary":false},{"width":8,"bonus":200,"chr":"H","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,5,255,255,2,6,255,0,3,5,255,255,3,6,255,0,4,5,255,255,4,6,255,0,5,5,255,255,5,6,255,34,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,255,221,6,7,225,251,6,8,210,247,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":4,"bonus":110,"chr":"I","pixels":[0,1,191,255,0,8,191,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,255,1,9,191,0,2,1,191,255,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,0,2,8,255,191,2,9,255,0,3,2,192,0,3,9,191,0],"secondary":false},{"width":6,"bonus":130,"chr":"J","pixels":[0,6,153,255,0,7,153,255,1,7,194,135,1,8,234,222,2,1,221,255,2,8,255,255,2,9,204,0,3,1,255,255,3,2,226,39,3,8,203,255,3,9,255,0,4,1,203,255,4,2,255,221,4,3,225,251,4,4,225,251,4,5,225,251,4,6,225,251,4,7,166,235,4,9,204,0,5,2,204,0,5,3,221,0,5,4,221,0,5,5,221,0,5,6,221,0,5,7,221,0,5,8,153,0],"secondary":false},{"width":7,"bonus":155,"chr":"K","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,255,255,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,4,255,255,2,5,255,102,3,3,221,255,3,5,254,171,3,6,224,232,4,1,203,255,4,2,153,255,4,4,221,0,4,6,193,90,4,7,251,242,4,8,173,226,5,2,204,0,5,3,153,0,5,8,247,141,5,9,153,0],"secondary":false},{"width":6,"bonus":115,"chr":"L","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,255,255,1,9,204,0,2,8,255,255,2,9,255,0,3,8,255,255,3,9,255,0,4,8,255,255,4,9,255,0,5,9,255,0],"secondary":false},{"width":9,"bonus":240,"chr":"M","pixels":[0,1,245,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,0,8,255,255,1,2,251,173,1,3,255,225,1,4,255,85,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,1,9,255,0,2,3,191,83,2,4,249,212,2,5,212,229,3,5,226,119,3,6,249,237,3,7,165,227,4,6,241,245,4,7,245,155,4,8,155,32,5,4,207,255,5,5,191,254,5,7,232,0,6,2,169,255,6,3,223,255,6,5,207,0,6,6,190,0,7,1,245,255,7,2,255,255,7,3,255,255,7,4,255,255,7,5,255,255,7,6,255,255,7,7,255,255,7,8,255,255,8,2,245,0,8,3,255,0,8,4,255,0,8,5,255,0,8,6,255,0,8,7,255,0,8,8,255,0,8,9,255,0],"secondary":false},{"width":8,"bonus":200,"chr":"N","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,2,255,255,1,3,235,111,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,3,255,221,2,4,163,160,3,4,246,194,3,5,214,223,4,5,214,122,4,6,246,229,5,6,163,160,5,7,255,255,6,1,203,255,6,2,225,251,6,3,225,251,6,4,225,251,6,5,225,251,6,6,225,251,6,7,235,240,6,8,254,204,7,2,204,0,7,3,221,0,7,4,221,0,7,5,221,0,7,6,221,0,7,7,221,0,7,8,221,0,7,9,204,0],"secondary":false},{"width":10,"bonus":200,"chr":"O","pixels":[0,4,187,255,0,5,169,255,1,2,203,255,1,3,153,255,1,5,205,85,1,6,226,192,1,7,224,232,2,1,153,255,2,3,204,0,2,4,153,0,2,7,209,145,2,8,234,167,3,1,255,255,3,2,153,0,3,8,255,255,3,9,153,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,255,255,5,2,255,0,5,8,255,255,5,9,255,0,6,1,153,255,6,2,255,102,6,8,153,255,6,9,255,0,7,2,234,222,7,3,194,201,7,6,169,255,7,7,203,255,7,9,153,0,8,3,225,116,8,4,228,209,8,5,192,225,8,7,170,0,8,8,204,0,9,5,187,0,9,6,170,0],"secondary":false},{"width":7,"bonus":165,"chr":"P","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,0,4,1,187,255,4,2,255,136,4,5,187,255,4,6,255,0,5,2,224,155,5,3,239,236,5,6,187,0,6,4,221,0],"secondary":false},{"width":9,"bonus":185,"chr":"Q","pixels":[0,4,187,255,0,5,187,255,1,2,221,255,1,4,155,112,1,5,205,85,1,6,228,171,1,7,235,240,2,1,187,255,2,3,221,0,2,7,187,116,2,8,243,178,3,1,255,255,3,2,187,0,3,8,255,255,3,9,170,0,4,1,255,255,4,2,255,0,4,8,255,255,4,9,255,0,5,1,237,255,5,2,255,0,5,8,237,255,5,9,255,0,6,2,251,207,6,7,255,255,6,9,238,0,7,3,255,255,7,4,203,255,7,5,221,255,7,6,255,255,7,7,155,196,7,8,254,204,8,4,255,17,8,5,207,21,8,6,221,0,8,7,255,0,8,9,204,0],"secondary":false},{"width":7,"bonus":180,"chr":"R","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,1,255,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,255,255,1,6,226,39,1,7,226,39,1,8,226,39,1,9,204,0,2,1,255,255,2,2,255,0,2,5,255,255,2,6,255,0,3,1,255,255,3,2,255,0,3,5,255,255,3,6,255,187,4,2,254,239,4,3,203,255,4,4,255,255,4,6,255,68,4,7,250,243,4,8,181,239,5,3,239,18,5,4,204,0,5,5,255,0,5,8,245,107,5,9,170,0],"secondary":false},{"width":6,"bonus":130,"chr":"S","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,1,255,255,2,2,204,0,2,4,198,219,2,5,232,93,2,8,255,255,2,9,238,0,3,1,255,255,3,2,255,0,3,5,255,255,3,8,255,255,3,9,255,0,4,1,169,255,4,2,255,68,4,5,160,217,4,6,255,221,4,7,237,255,4,9,255,0,5,2,170,0,5,7,223,19,5,8,238,0],"secondary":false},{"width":8,"bonus":125,"chr":"T","pixels":[0,1,255,255,1,1,255,255,1,2,255,0,2,1,255,255,2,2,255,34,3,1,255,255,3,2,255,221,3,3,225,251,3,4,225,251,3,5,225,251,3,6,225,251,3,7,225,251,3,8,210,247,4,1,255,255,4,2,255,0,4,3,221,0,4,4,221,0,4,5,221,0,4,6,221,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,255,255,5,2,255,0,6,2,255,0],"secondary":false},{"width":8,"bonus":165,"chr":"U","pixels":[0,1,203,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,187,255,1,2,211,41,1,3,226,39,1,4,226,39,1,5,226,39,1,6,230,75,1,7,232,187,1,8,184,189,2,8,255,255,3,8,255,255,3,9,255,0,4,8,221,255,4,9,255,0,5,1,203,255,5,2,221,255,5,3,221,255,5,4,221,255,5,5,221,255,5,6,255,255,5,7,237,255,5,9,221,0,6,2,211,41,6,3,226,39,6,4,226,39,6,5,226,39,6,6,223,19,6,7,255,0,6,8,238,0],"secondary":false},{"width":7,"bonus":125,"chr":"V","pixels":[0,1,255,255,0,2,187,255,1,2,255,68,1,3,228,171,1,4,255,255,1,5,153,255,2,4,153,0,2,5,255,85,2,6,228,209,2,7,242,251,3,6,164,185,3,7,255,255,3,8,251,207,4,4,203,255,4,5,237,255,4,8,255,0,4,9,204,0,5,1,169,255,5,2,255,255,5,3,153,255,5,5,204,0,5,6,238,0,6,2,170,0,6,3,255,0,6,4,153,0],"secondary":false},{"width":10,"bonus":245,"chr":"W","pixels":[0,1,255,255,0,2,221,255,1,2,255,17,1,3,237,128,1,4,223,214,1,5,255,255,1,6,203,255,2,5,191,23,2,6,255,136,2,7,255,255,2,8,255,255,3,3,153,255,3,4,237,255,3,5,221,255,3,7,168,103,3,8,255,0,3,9,255,0,4,1,255,255,4,2,255,255,4,3,187,209,4,4,153,0,4,5,238,0,4,6,221,0,5,2,255,102,5,3,254,171,5,4,248,244,5,5,203,255,6,4,170,0,6,5,241,54,6,6,231,150,6,7,255,255,6,8,255,255,7,4,153,255,7,5,237,255,7,6,241,252,7,7,207,188,7,8,255,85,7,9,255,0,8,1,237,255,8,2,237,255,8,3,153,255,8,4,153,171,8,5,153,0,8,6,238,0,8,7,238,0,8,8,153,0,9,2,238,0,9,3,238,0,9,4,153,0],"secondary":false},{"width":7,"bonus":130,"chr":"X","pixels":[0,8,169,255,1,1,187,255,1,2,220,236,1,7,237,255,1,9,170,0,2,2,205,85,2,3,248,227,2,4,166,235,2,5,255,255,2,6,153,255,2,8,238,0,3,3,155,196,3,4,255,255,3,5,248,244,3,6,255,51,3,7,153,0,4,2,237,255,4,5,255,51,4,6,251,207,4,7,186,233,5,1,203,255,5,3,238,0,5,7,225,116,5,8,255,255,6,2,204,0,6,9,255,0],"secondary":false},{"width":7,"bonus":90,"chr":"Y","pixels":[0,1,169,255,1,2,249,243,2,3,248,157,2,4,255,255,3,4,241,234,3,5,254,204,3,6,232,243,3,7,225,251,3,8,210,247,4,3,255,255,4,5,221,0,4,6,204,0,4,7,221,0,4,8,221,0,4,9,204,0,5,1,237,255,5,4,255,0,6,2,238,0],"secondary":false},{"width":7,"bonus":140,"chr":"Z","pixels":[0,8,187,255,1,1,255,255,1,7,221,255,1,8,255,255,1,9,187,0,2,1,255,255,2,2,255,0,2,5,203,255,2,8,255,255,2,9,255,0,3,1,255,255,3,2,255,0,3,4,203,255,3,6,204,0,3,8,255,255,3,9,255,0,4,1,255,255,4,2,255,221,4,5,204,0,4,8,255,255,4,9,255,0,5,1,187,255,5,2,255,34,5,3,221,0,5,8,153,255,5,9,255,0,6,2,187,0,6,9,153,0],"secondary":false},{"width":7,"bonus":170,"chr":"0","pixels":[0,2,153,255,0,3,221,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,169,255,1,1,187,255,1,3,153,0,1,4,221,0,1,5,255,0,1,6,255,0,1,7,243,71,1,8,237,219,2,1,187,255,2,2,187,0,2,8,205,233,2,9,211,41,3,1,221,255,3,2,205,85,3,8,203,255,3,9,187,0,4,2,243,178,4,3,255,255,4,4,187,255,4,5,187,255,4,6,237,255,4,7,169,255,4,9,204,0,5,3,170,0,5,4,255,0,5,5,187,0,5,6,187,0,5,7,238,0,5,8,170,0],"secondary":false},{"width":7,"bonus":100,"chr":"1","pixels":[1,8,187,255,2,1,203,255,2,2,224,232,2,3,219,218,2,4,187,255,2,5,187,255,2,6,187,255,2,7,187,255,2,8,237,255,2,9,187,0,3,2,218,80,3,3,218,80,3,4,205,85,3,5,205,85,3,6,205,85,3,7,205,85,3,8,241,215,3,9,238,0,4,8,168,207,4,9,204,0],"secondary":false},{"width":7,"bonus":105,"chr":"2","pixels":[1,8,255,255,2,1,187,255,2,6,153,255,2,8,223,214,2,9,255,0,3,1,203,255,3,2,187,0,3,5,153,255,3,7,153,0,3,8,219,218,3,9,187,0,4,1,187,255,4,2,234,167,4,4,203,255,4,6,153,0,4,8,187,255,4,9,187,0,5,2,214,122,5,3,200,152,5,5,204,0,5,9,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"3","pixels":[0,8,203,255,1,1,187,255,1,8,191,250,1,9,204,0,2,1,187,255,2,2,196,45,2,4,187,255,2,5,174,150,2,8,203,255,2,9,187,0,3,2,246,229,3,3,210,247,3,5,241,215,3,6,173,175,3,7,169,255,3,9,204,0,4,3,227,57,4,4,204,0,4,6,228,133,4,7,174,150,4,8,170,0],"secondary":false},{"width":7,"bonus":150,"chr":"4","pixels":[0,6,237,255,1,4,187,255,1,6,219,218,1,7,238,0,2,3,169,255,2,5,187,0,2,6,219,218,2,7,187,0,3,1,187,255,3,2,153,255,3,3,155,112,3,4,193,90,3,6,203,255,3,7,205,85,4,1,187,255,4,2,237,201,4,3,228,209,4,4,205,233,4,5,205,233,4,6,242,251,4,7,241,198,4,8,205,233,5,2,187,0,5,3,187,0,5,4,187,0,5,5,187,0,5,6,224,155,5,7,238,0,5,8,187,0,5,9,187,0],"secondary":false},{"width":7,"bonus":130,"chr":"5","pixels":[1,1,237,255,1,2,187,255,1,3,187,255,1,4,187,255,1,8,207,251,2,1,187,255,2,2,238,0,2,3,187,0,2,4,237,201,2,5,187,0,2,8,187,255,2,9,204,0,3,1,187,255,3,2,187,0,3,4,203,255,3,5,191,23,3,8,203,255,3,9,187,0,4,2,187,0,4,5,251,242,4,6,191,250,4,7,221,255,4,9,204,0,5,6,243,71,5,7,191,23,5,8,221,0],"secondary":false},{"width":7,"bonus":150,"chr":"6","pixels":[0,3,169,255,0,4,255,255,0,5,255,255,0,6,237,255,0,7,153,255,1,2,187,255,1,4,209,145,1,5,255,68,1,6,255,0,1,7,246,123,1,8,228,209,2,1,203,255,2,3,187,0,2,4,200,238,2,8,219,218,2,9,187,0,3,1,187,255,3,2,204,0,3,4,203,255,3,5,205,85,3,8,187,255,3,9,187,0,4,2,187,0,4,5,248,227,4,6,255,255,4,7,187,255,4,9,187,0,5,6,221,0,5,7,255,0,5,8,187,0],"secondary":false},{"width":7,"bonus":105,"chr":"7","pixels":[0,1,187,255,1,1,187,255,1,2,187,0,1,8,203,255,2,1,187,255,2,2,187,0,2,6,237,255,2,7,153,255,2,9,204,0,3,1,187,255,3,2,205,85,3,3,153,255,3,4,221,255,3,7,238,0,3,8,153,0,4,1,255,255,4,2,237,201,4,4,153,0,4,5,221,0,5,2,255,0,5,3,187,0],"secondary":false},{"width":7,"bonus":165,"chr":"8","pixels":[1,2,237,255,1,3,221,255,1,6,203,255,1,7,228,247,2,1,203,255,2,3,241,54,2,4,248,209,2,5,186,233,2,7,207,21,2,8,250,226,3,1,187,255,3,2,204,0,3,4,186,233,3,5,221,98,3,6,170,0,3,8,191,250,3,9,221,0,4,1,221,255,4,2,209,104,4,4,169,255,4,5,237,219,4,8,187,255,4,9,187,0,5,2,243,178,5,3,187,209,5,5,204,128,5,6,251,242,5,7,240,253,5,9,187,0,6,3,170,0,6,4,153,0,6,7,238,0,6,8,238,0],"secondary":false},{"width":7,"bonus":160,"chr":"9","pixels":[1,2,221,255,1,3,191,250,1,4,242,251,1,8,153,255,2,1,203,255,2,3,221,0,2,4,191,23,2,5,253,223,2,8,191,250,2,9,153,0,3,1,187,255,3,2,204,0,3,5,191,250,3,6,221,0,3,8,203,255,3,9,187,0,4,1,187,255,4,2,218,139,4,6,200,65,4,7,169,255,4,9,204,0,5,2,228,171,5,3,245,247,5,4,255,255,5,5,255,255,5,6,223,214,5,8,170,0,6,3,153,0,6,4,238,0,6,5,255,0,6,6,255,0,6,7,187,0],"secondary":false},{"width":8,"bonus":130,"chr":"%","pixels":[0,3,255,255,0,8,255,255,1,2,255,255,1,4,255,255,1,7,255,255,1,9,255,0,2,3,255,255,2,5,255,41,2,6,255,255,2,8,255,0,3,4,255,41,3,5,255,255,3,7,255,0,4,4,255,255,4,6,255,92,4,7,255,255,5,3,255,255,5,5,255,0,5,6,255,255,5,8,255,255,6,2,255,255,6,4,255,0,6,7,255,255,6,9,255,0,7,3,255,0,7,8,255,0],"secondary":false},{"width":4,"bonus":80,"chr":"/","pixels":[0,7,153,255,0,8,237,255,0,9,221,255,1,4,187,255,1,5,237,255,1,6,169,255,1,8,153,0,1,9,238,0,1,10,221,0,2,1,221,255,2,2,221,255,2,5,187,0,2,6,238,0,2,7,170,0,3,2,221,0,3,3,221,0],"secondary":false},{"width":7,"bonus":110,"chr":"+","pixels":[0,5,221,255,1,5,255,255,1,6,221,0,2,5,255,255,2,6,255,34,3,2,153,255,3,3,223,253,3,4,225,251,3,5,255,255,3,6,255,221,3,7,225,251,3,8,210,247,4,3,153,0,4,4,221,0,4,5,255,255,4,6,255,0,4,7,221,0,4,8,221,0,4,9,204,0,5,5,255,255,5,6,255,0,6,6,255,0],"secondary":false},{"width":5,"bonus":75,"chr":"?","pixels":[0,1,169,255,1,1,255,255,1,2,170,0,1,6,221,255,1,8,255,255,2,1,255,255,2,2,255,0,2,5,169,255,2,7,221,0,2,9,255,0,3,2,255,255,3,3,221,255,3,6,170,0,4,3,255,17,4,4,221,0],"secondary":false},{"width":2,"bonus":70,"chr":"!","pixels":[0,1,169,255,0,2,187,255,0,3,187,255,0,4,187,255,0,5,187,255,0,6,169,255,0,8,255,255,1,2,181,48,1,3,196,45,1,4,196,45,1,5,196,45,1,6,196,45,1,7,170,0,1,9,255,0],"secondary":false},{"width":8,"bonus":230,"chr":"@","pixels":[0,4,255,255,0,5,255,255,0,6,221,255,0,7,255,255,0,8,187,255,1,3,221,255,1,5,255,0,1,6,255,34,1,7,221,0,1,8,255,68,1,9,250,243,2,2,221,255,2,4,232,93,2,5,255,255,2,6,237,255,2,7,255,255,2,10,248,157,3,2,255,255,3,3,221,0,3,4,255,255,3,6,255,0,3,7,241,54,3,8,254,204,3,10,214,223,3,11,153,0,4,2,237,255,4,3,255,0,4,4,255,255,4,5,255,0,4,8,255,255,4,9,204,0,4,11,187,0,5,3,253,240,5,4,255,255,5,5,255,221,5,6,221,255,5,7,221,255,5,8,237,255,5,9,255,0,6,4,240,36,6,5,255,34,6,6,226,39,6,7,226,39,6,8,250,226,6,9,238,0,7,9,221,0],"secondary":false},{"width":8,"bonus":200,"chr":"#","pixels":[0,6,255,255,1,3,255,255,1,6,255,255,1,7,254,171,1,8,237,255,2,1,169,255,2,2,237,255,2,3,255,255,2,4,255,221,2,5,175,247,2,6,255,255,2,7,255,85,2,8,170,0,2,9,238,0,3,2,170,0,3,3,255,255,3,4,255,0,3,5,221,0,3,6,255,255,3,7,255,0,4,3,255,255,4,4,255,153,4,5,203,255,4,6,255,255,4,7,254,239,4,8,187,255,5,1,255,255,5,2,187,255,5,3,255,255,5,4,255,85,5,5,159,27,5,6,255,255,5,7,255,0,5,8,238,0,5,9,187,0,6,2,255,0,6,3,255,255,6,4,255,0,6,7,255,0,7,4,255,0],"secondary":false},{"width":6,"bonus":130,"chr":"$","pixels":[0,2,153,255,0,3,169,255,1,1,203,255,1,3,187,116,1,4,244,231,1,8,243,249,2,0,203,255,2,1,237,255,2,2,204,0,2,4,176,197,2,5,237,128,2,8,240,253,2,9,251,207,3,1,251,242,3,2,239,18,3,5,247,245,3,6,164,132,3,8,255,255,3,9,240,36,3,10,204,0,4,2,240,36,4,6,249,174,4,7,198,219,4,9,255,0,5,7,170,0,5,8,170,0],"secondary":false},{"width":6,"bonus":75,"chr":"^","pixels":[0,4,153,255,0,5,237,255,1,2,203,255,1,3,221,255,1,5,153,0,1,6,238,0,2,1,221,255,2,2,230,245,2,3,218,80,2,4,221,0,3,2,227,57,3,3,246,194,3,4,230,245,4,4,187,0,4,5,239,145],"secondary":false},{"width":6,"bonus":35,"chr":"~","pixels":[1,5,255,255,2,5,221,255,2,6,255,51,3,6,250,226,4,5,203,255,4,7,221,0,5,6,204,0],"secondary":false},{"width":7,"bonus":175,"chr":"&","pixels":[0,6,187,255,1,2,237,255,1,3,255,255,1,4,191,250,1,5,187,255,1,7,224,155,1,8,223,214,2,1,255,255,2,3,238,0,2,4,255,255,2,5,191,23,2,6,187,0,2,8,255,255,2,9,187,0,3,1,255,255,3,2,255,0,3,4,255,255,3,5,255,0,3,8,255,255,3,9,255,0,4,2,255,0,4,4,255,255,4,5,255,34,4,8,187,255,4,9,255,0,5,3,203,255,5,4,255,255,5,5,255,221,5,6,196,243,5,7,155,196,5,9,187,0,6,4,234,167,6,5,255,0,6,6,221,0,6,7,187,0],"secondary":false},{"width":6,"bonus":70,"chr":"*","pixels":[0,2,169,255,1,2,169,255,1,3,237,219,1,4,255,255,2,1,203,255,2,2,240,253,2,3,255,255,2,4,228,133,2,5,255,0,3,2,237,183,3,3,245,107,3,4,255,153,4,3,170,0,4,5,153,0],"secondary":false},{"width":4,"bonus":100,"chr":"(","pixels":[0,3,173,255,0,4,239,255,0,5,253,255,0,6,229,255,0,7,171,255,1,1,193,255,1,2,203,255,1,4,188,64,1,5,241,25,1,6,252,46,1,7,240,112,1,8,238,218,1,9,210,232,2,0,209,255,2,2,194,2,2,3,204,0,2,9,223,111,2,10,245,224,3,1,210,0,3,11,216,0],"secondary":false},{"width":4,"bonus":75,"chr":")","pixels":[1,0,211,255,1,10,215,255,2,1,244,203,2,2,222,234,2,8,203,255,2,9,191,255,2,11,216,0,3,2,213,94,3,3,238,186,3,4,246,248,3,5,253,255,3,6,231,253,3,7,186,234,3,9,203,1,3,10,191,0],"secondary":false},{"width":7,"bonus":60,"chr":"_","pixels":[0,9,153,255,1,9,255,255,1,10,153,0,2,9,255,255,2,10,255,0,3,9,255,255,3,10,255,0,4,9,255,255,4,10,255,0,5,9,255,255,5,10,255,0,6,10,255,0],"secondary":false},{"width":4,"bonus":30,"chr":"-","pixels":[0,5,255,255,1,5,255,255,1,6,255,0,2,5,255,255,2,6,255,0,3,6,255,0],"secondary":true},{"width":8,"bonus":100,"chr":"=","pixels":[0,4,255,255,0,6,255,255,1,4,255,255,1,5,255,0,1,6,255,255,1,7,255,0,2,4,255,255,2,5,255,0,2,6,255,255,2,7,255,0,3,4,255,255,3,5,255,0,3,6,255,255,3,7,255,0,4,4,255,255,4,5,255,0,4,6,255,255,4,7,255,0,5,5,255,0,5,7,255,0],"secondary":false},{"width":3,"bonus":105,"chr":"[","pixels":[0,0,203,255,0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,203,255,1,0,237,255,1,1,211,41,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,252,241,1,9,204,0,2,1,238,0,2,9,238,0],"secondary":false},{"width":3,"bonus":105,"chr":"]","pixels":[0,0,237,255,0,8,237,255,1,0,203,255,1,1,253,223,1,2,225,251,1,3,225,251,1,4,225,251,1,5,225,251,1,6,225,251,1,7,225,251,1,8,210,247,1,9,238,0,2,1,204,0,2,2,221,0,2,3,221,0,2,4,221,0,2,5,221,0,2,6,221,0,2,7,221,0,2,8,221,0,2,9,204,0],"secondary":false},{"width":5,"bonus":90,"chr":"{","pixels":[0,5,153,255,1,2,169,255,1,3,221,255,1,4,221,255,1,5,203,255,1,6,255,255,1,7,221,255,1,8,169,255,2,1,237,255,2,3,181,48,2,4,223,19,2,5,221,0,2,6,207,21,2,7,255,34,2,8,232,93,2,9,249,243,3,2,238,0,3,10,238,0],"secondary":false},{"width":5,"bonus":90,"chr":"}","pixels":[1,1,237,255,1,9,237,255,2,2,249,174,2,3,232,243,2,4,225,251,2,5,207,251,2,6,255,255,2,7,223,253,2,8,181,239,2,10,238,0,3,3,170,0,3,4,221,0,3,5,241,162,3,6,204,0,3,7,255,0,3,8,221,0,3,9,170,0,4,6,153,0],"secondary":false},{"width":3,"bonus":20,"chr":":","pixels":[1,3,255,255,1,7,255,255,2,4,255,0,2,8,255,0],"secondary":true},{"width":3,"bonus":40,"chr":";","pixels":[0,9,201,255,1,3,255,255,1,7,241,255,1,8,255,255,1,10,201,0,2,4,255,0,2,8,241,0,2,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":"\\"","pixels":[0,1,255,255,0,2,255,255,1,2,255,0,1,3,255,0,2,1,255,255,2,2,255,255],"secondary":true},{"width":2,"bonus":20,"chr":"\'","pixels":[0,1,255,255,0,2,177,255,1,2,255,30,1,3,177,0],"secondary":true},{"width":7,"bonus":70,"chr":"<","pixels":[0,5,203,255,1,5,255,255,1,6,228,133,2,4,237,255,2,6,254,239,3,4,169,255,3,5,238,0,3,6,175,247,3,7,243,89,4,3,221,255,4,5,170,0,4,7,244,231,5,4,221,0,5,8,221,0],"secondary":false},{"width":7,"bonus":80,"chr":">","pixels":[0,3,203,255,0,7,203,255,1,4,228,133,1,7,187,255,1,8,204,0,2,4,247,245,2,6,255,255,2,8,187,0,3,4,175,247,3,5,248,157,3,6,203,255,3,7,255,0,4,5,255,255,4,6,173,75,4,7,204,0,5,6,255,0],"secondary":false},{"width":5,"bonus":70,"chr":"\\\\","pixels":[1,1,153,255,1,2,255,255,1,3,203,255,2,2,153,0,2,3,255,51,2,4,231,150,2,5,255,255,2,6,203,255,3,6,255,34,3,7,231,150,3,8,255,255,3,9,207,251,4,9,255,0,4,10,204,0],"secondary":false},{"width":2,"bonus":10,"chr":".","pixels":[0,8,255,255,1,9,255,0],"secondary":true},{"width":3,"bonus":30,"chr":",","pixels":[0,9,205,255,1,7,205,255,1,8,255,255,1,10,205,0,2,8,205,0,2,9,255,0],"secondary":true},{"width":3,"bonus":100,"chr":"|","pixels":[0,1,221,255,0,2,221,255,0,3,221,255,0,4,221,255,0,5,221,255,0,6,221,255,0,7,221,255,0,8,221,255,0,9,221,255,0,10,203,255,1,2,226,39,1,3,226,39,1,4,226,39,1,5,226,39,1,6,226,39,1,7,226,39,1,8,226,39,1,9,226,39,1,10,226,39,1,11,204,0],"secondary":false}],"width":10,"spacewidth":3,"shadow":true,"height":12,"basey":8}');

/***/ }),

/***/ "./src/fonts/pixel_8px_digits.fontmeta.json":
/*!**************************************************!*\
  !*** ./src/fonts/pixel_8px_digits.fontmeta.json ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"chars":[{"width":7,"bonus":120,"chr":"0","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,255,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,255,2,0,255,255,2,2,255,0,2,7,255,255,3,1,255,255,3,6,255,255,3,8,255,0,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,7,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0],"secondary":false},{"width":4,"bonus":95,"chr":"1","pixels":[0,1,255,255,0,7,255,255,1,0,255,255,1,1,255,255,1,2,255,255,1,3,255,255,1,4,255,255,1,5,255,255,1,6,255,255,1,7,255,255,1,8,255,0,2,1,255,0,2,2,255,0,2,3,255,0,2,4,255,0,2,5,255,0,2,6,255,0,2,7,255,255,2,8,255,0],"secondary":false},{"width":7,"bonus":140,"chr":"2","pixels":[0,1,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,5,255,255,1,7,255,255,1,8,255,0,2,0,255,255,2,1,255,0,2,4,255,255,2,6,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,5,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,0,4,7,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,8,255,0],"secondary":false},{"width":6,"bonus":115,"chr":"3","pixels":[0,1,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,1,255,255,3,2,255,255,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,2,255,0,4,3,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":5,"bonus":110,"chr":"4","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,1,1,255,0,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,255,1,6,255,0,2,3,255,255,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,4,255,0,3,5,255,255,3,6,255,0,3,7,255,0,3,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"5","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,6,255,255,1,0,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,8,255,0,4,1,255,0,4,5,255,0,4,6,255,0,4,7,255,0],"secondary":false},{"width":7,"bonus":160,"chr":"6","pixels":[0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,1,255,255,1,3,255,0,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,2,255,0,2,3,255,255,2,5,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":6,"bonus":105,"chr":"7","pixels":[0,0,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,1,255,0,1,4,255,255,1,5,255,255,1,7,255,0,1,8,255,0,2,0,255,255,2,1,255,0,2,2,255,255,2,3,255,255,2,5,255,0,2,6,255,0,3,0,255,255,3,1,255,255,3,3,255,0,3,4,255,0,4,1,255,0,4,2,255,0],"secondary":false},{"width":7,"bonus":170,"chr":"8","pixels":[0,1,255,255,0,2,255,255,0,4,255,255,0,5,255,255,0,6,255,255,1,0,255,255,1,2,255,0,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,255,2,0,255,255,2,1,255,0,2,3,255,255,2,4,255,0,2,7,255,255,2,8,255,0,3,0,255,255,3,1,255,0,3,3,255,255,3,4,255,0,3,7,255,255,3,8,255,0,4,1,255,255,4,2,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,8,255,0,5,2,255,0,5,3,255,0,5,5,255,0,5,6,255,0,5,7,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"9","pixels":[0,1,255,255,0,2,255,255,1,0,255,255,1,2,255,0,1,3,255,255,2,0,255,255,2,1,255,0,2,4,255,255,3,0,255,255,3,1,255,0,3,4,255,255,3,5,255,0,4,1,255,255,4,2,255,255,4,3,255,255,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,2,255,0,5,3,255,0,5,4,255,0,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":7,"bonus":130,"chr":"m","pixels":[0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,3,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,4,255,255,2,5,255,255,2,6,255,255,2,7,255,255,3,3,255,255,3,5,255,0,3,6,255,0,3,7,255,0,3,8,255,0,4,4,255,255,4,5,255,255,4,6,255,255,4,7,255,255,5,5,255,0,5,6,255,0,5,7,255,0,5,8,255,0],"secondary":false},{"width":3,"bonus":80,"chr":"(","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,0,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,255,2,1,255,0],"secondary":false},{"width":2,"bonus":70,"chr":")","pixels":[0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,2,255,0,1,3,255,0,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0],"secondary":false},{"width":6,"bonus":135,"chr":"h","pixels":[0,0,255,255,0,1,255,255,0,2,255,255,0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,1,255,0,1,2,255,0,1,3,255,255,1,4,255,0,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,4,255,0,2,5,255,0,3,4,255,255,3,5,255,255,3,6,255,255,3,7,255,255,4,5,255,0,4,6,255,0,4,7,255,0,4,8,255,0],"secondary":false},{"width":5,"bonus":65,"chr":"r","pixels":[0,3,255,255,0,4,255,255,0,5,255,255,0,6,255,255,0,7,255,255,1,4,255,255,1,5,255,0,1,6,255,0,1,7,255,0,1,8,255,0,2,3,255,255,2,5,255,0,3,4,255,0],"secondary":false}],"width":7,"spacewidth":3,"shadow":true,"height":9,"basey":7}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ability/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});